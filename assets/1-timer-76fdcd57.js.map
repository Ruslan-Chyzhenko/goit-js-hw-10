{"version":3,"file":"1-timer-76fdcd57.js","sources":["../../src/js/1-timer.js"],"sourcesContent":["// Import flatpickr library\nimport flatpickr from \"flatpickr\";\n// Add import styles\nimport \"flatpickr/dist/flatpickr.min.css\";\n// Import iziToast library\nimport iziToast from 'izitoast';\n// Add import styles\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// Declare variable outside the method for timer access\nlet countdownInterval;\nlet userSelectedDate; // Adding a variable to save the selected date\n\n// Event handler for the \"Start\" button\ndocument.querySelector(\"[data-start]\").addEventListener(\"click\", function () {\n  // Deactivate button and input\n  document.querySelector(\"#datetime-picker\").disabled = true;\n  this.disabled = true;\n\n  // Start the timer\n  startCountdown(userSelectedDate);\n});\n\n// Function to start the countdown\nfunction startCountdown(targetDate) {\n  // Calculate the difference between the target and current date in milliseconds\n  let timeDifference = targetDate.getTime() - new Date().getTime();\n\n  // Update the interface every second\n  countdownInterval = setInterval(function () {\n    // Check if the timer is not yet finished\n    if (timeDifference > 0) {\n      // Call the function to convert milliseconds to days, hours, minutes, and seconds\n      const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n      // Update the interface with the obtained values\n      updateTimerUI(days, hours, minutes, seconds);\n\n      // Decrease the difference by 1 second\n      timeDifference -= 1000;\n    } else {\n      // If the timer is finished, stop the interval\n      clearInterval(countdownInterval);\n\n      // Update the interface with values '0:00:00:00'\n      updateTimerUI(0, 0, 0, 0);\n\n      // Activate the input and show a toast\n      document.getElementById(\"datetime-picker\").disabled = false;\n      iziToast.success({\n        title: 'Success',\n        message: 'Countdown finished!',\n        position: 'topRight'\n      });\n    }\n  }, 1000); // Updating every second interval\n}\n\n// Function to update the timer interface\nfunction updateTimerUI(days, hours, minutes, seconds) {\n  // Use addLeadingZero to format time units\n  document.querySelector(\"[data-days]\").textContent = addLeadingZero(days);\n  document.querySelector(\"[data-hours]\").textContent = addLeadingZero(hours);\n  document.querySelector(\"[data-minutes]\").textContent = addLeadingZero(minutes);\n  document.querySelector(\"[data-seconds]\").textContent = addLeadingZero(seconds);\n}\n\n// Function to format time units\nfunction addLeadingZero(value) {\n  // Add a leading zero to single digits '1-9'\n  return value < 10 ? `0${value}` : value;\n}\n\n// Function to convert milliseconds to days, hours, minutes, and seconds\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// Initialize flatpickr\nflatpickr(\"#datetime-picker\", {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    // Check if the selected date is in the future\n    if (selectedDates[0] && selectedDates[0] > new Date()) {\n      // Save the selected date in a variable\n      userSelectedDate = selectedDates[0];\n      // Activate the \"Start\" button\n      document.querySelector(\"[data-start]\").disabled = false;\n    } else {\n      // If the date is invalid, disable the \"Start\" button\n      document.querySelector(\"[data-start]\").disabled = true;\n      // Show a message\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight'\n      });\n    }\n  },\n});"],"names":["countdownInterval","userSelectedDate","startCountdown","targetDate","timeDifference","days","hours","minutes","seconds","convertMs","updateTimerUI","iziToast","addLeadingZero","value","ms","flatpickr","selectedDates"],"mappings":"gDAUA,IAAIA,EACAC,EAGJ,SAAS,cAAc,cAAc,EAAE,iBAAiB,QAAS,UAAY,CAE3E,SAAS,cAAc,kBAAkB,EAAE,SAAW,GACtD,KAAK,SAAW,GAGhBC,EAAeD,CAAgB,CACjC,CAAC,EAGD,SAASC,EAAeC,EAAY,CAElC,IAAIC,EAAiBD,EAAW,QAAO,EAAK,IAAI,KAAI,EAAG,UAGvDH,EAAoB,YAAY,UAAY,CAE1C,GAAII,EAAiB,EAAG,CAEtB,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAc,EAGlEM,EAAcL,EAAMC,EAAOC,EAASC,CAAO,EAG3CJ,GAAkB,GACxB,MAEM,cAAcJ,CAAiB,EAG/BU,EAAc,EAAG,EAAG,EAAG,CAAC,EAGxB,SAAS,eAAe,iBAAiB,EAAE,SAAW,GACtDC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,sBACT,SAAU,UAClB,CAAO,CAEJ,EAAE,GAAI,CACT,CAGA,SAASD,EAAcL,EAAMC,EAAOC,EAASC,EAAS,CAEpD,SAAS,cAAc,aAAa,EAAE,YAAcI,EAAeP,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcO,EAAeN,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcM,EAAeL,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcK,EAAeJ,CAAO,CAC/E,CAGA,SAASI,EAAeC,EAAO,CAE7B,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAKA,CACpC,CAGA,SAASJ,EAAUK,EAAI,CAMrB,MAAMT,EAAO,KAAK,MAAMS,EAAK,KAAG,EAC1BR,EAAQ,KAAK,MAAOQ,EAAK,MAAO,IAAI,EACpCP,EAAU,KAAK,MAAQO,EAAK,MAAO,KAAQ,GAAM,EACjDN,EAAU,KAAK,MAASM,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGAO,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAEjBA,EAAc,CAAC,GAAKA,EAAc,CAAC,EAAI,IAAI,MAE7Cf,EAAmBe,EAAc,CAAC,EAElC,SAAS,cAAc,cAAc,EAAE,SAAW,KAGlD,SAAS,cAAc,cAAc,EAAE,SAAW,GAElDL,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EAEJ,CACH,CAAC"}